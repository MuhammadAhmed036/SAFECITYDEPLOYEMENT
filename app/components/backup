'use client';

import { useState, useMemo } from 'react';
import styles from './ClusterPreviewPopup.module.css';

function ImageWithFallback({ src, alt, fallbackIcon }) {
  const [hasError, setHasError] = useState(false);

  if (!src || hasError) {
    return (
      <img
        src={fallbackIcon}
        alt="No image available"
        className={styles.previewImage}
        onError={() => setHasError(true)}
      />
    );
  }

  return (
    <img
      src={src}
      alt={alt}
      className={styles.previewImage}
      onError={() => setHasError(true)}
    />
  );
}

export default function ClusterPreviewPopup({ 
  isOpen, 
  onClose, 
  clusterData = [], 
  onSeeDetails, 
  activeTab = 'events',
  fallbackIcon = '/camera-icon.svg',
  realTimeStreamEvents = [] // New prop for real-time stream events
}) {
  // Get recent items (last 3-5 items) for preview
  const recentItems = useMemo(() => {
    if (activeTab === 'events') {
      return (clusterData || []).slice(0, 10);
    } else if (activeTab === 'streams') {
      // Use realTimeStreamEvents if available, otherwise fall back to clusterData
      let streamData = realTimeStreamEvents || clusterData || [];
      
      // If we have cluster location data, filter by proximity
      if (clusterData && clusterData.length > 0 && clusterData[0].location) {
        const clusterLat = clusterData[0].location.geo_position?.latitude;
        const clusterLng = clusterData[0].location.geo_position?.longitude;
        
        if (clusterLat && clusterLng) {
          streamData = streamData.filter(item => {
            const itemLat = item.location?.geo_position?.latitude;
            const itemLng = item.location?.geo_position?.longitude;
            
            if (!itemLat || !itemLng) return false;
            
            // Calculate distance (simple approximation)
            const distance = Math.sqrt(
              Math.pow(clusterLat - itemLat, 2) + Math.pow(clusterLng - itemLng, 2)
            );
            
            return distance < 0.001; // Adjust threshold as needed
          });
        }
      }
      
      return streamData
        .sort((a, b) => new Date(b.create_time || b.timestamp) - new Date(a.create_time || a.timestamp))
        .slice(0, 10);
    } else if (activeTab === 'dahua') {
      // For Dahua tab, use realTimeStreamEvents or clusterData and get the most recent detection
      let dauhuaData = realTimeStreamEvents || clusterData || [];
      
      // Filter for items that have the required Dahua fields (source, user_data, similarity, create_time)
      dauhuaData = dauhuaData.filter(item => 
        item.source || item.user_data || item.similarity || item.create_time
      );
      
      return dauhuaData
        .sort((a, b) => new Date(b.create_time || b.timestamp) - new Date(a.create_time || a.timestamp))
        .slice(0, 1); // Only show the most recent detection
    }
    
    return [];
  }, [clusterData, activeTab, realTimeStreamEvents]);

  const totalCount = clusterData.length;
  const locationInfo = clusterData[0] || {};

  if (!isOpen) return null;

  return (
    <div className={styles.overlay} onClick={onClose}>
      <div className={styles.popup} onClick={(e) => e.stopPropagation()}>
        <div className={styles.header}>
          <h3 className={styles.title}>
            {activeTab === 'events' && 'Recent Detections'}
            {activeTab === 'streams' && 'Stream Activity'}
            {activeTab === 'dahua' && 'Camera Activity'}
          </h3>
          <button className={styles.closeButton} onClick={onClose}>
            <i className="bi bi-x-lg"></i>
          </button>
        </div>
        
        <div className={styles.content}>
          <div className={styles.locationInfo}>
            <div className={styles.locationText}>
              <i className="bi bi-geo-alt"></i>
              <span>{locationInfo.city || 'Unknown'}, {locationInfo.area || 'Unknown Area'}</span>
            </div>
            <div className={styles.countBadge}>
              {totalCount} {activeTab === 'events' ? 'detections' : activeTab === 'streams' ? 'streams' : 'cameras'}
            </div>
          </div>

          {activeTab === 'events' ? (
            recentItems.length > 0 ? (
              <div className={styles.recentItems}>
                <h4 className={styles.sectionTitle}>Recent Activity</h4>
                <div className={styles.itemsList}>
                  {recentItems.map((item, index) => (
                    <div key={item.eventId || index} className={styles.previewItem}>
                      <div className={styles.imageContainer}>
                        <ImageWithFallback
                          src={item.imageCandidates?.[0] || item.image}
                          alt={`${activeTab} preview`}
                          fallbackIcon={fallbackIcon}
                        />
                      </div>
                      <div className={styles.itemInfo}>
                        <div className={styles.itemLabel}>
                          {item.label || 'Unknown'}
                        </div>
                        {item.similarity && (
                          <div className={styles.similarity}>
                            {item.similarity}
                          </div>
                        )}
                        <div className={styles.timestamp}>
                          {item.when && item.when !== 'â€”' ? 
                            new Date(item.when).toLocaleString() : 
                            'Unknown time'
                          }
                        </div>
                      </div>
                    </div>
                  ))}
                </div>
              </div>
            ) : (
              <div className={styles.noData}>
                <i className="bi bi-info-circle"></i>
                <span>No recent activity available</span>
              </div>
            )
          ) : activeTab === 'streams' ? (
            recentItems.length > 0 ? (
              <div className={styles.recentItems}>
                <h4 className={styles.sectionTitle}>Recent Activity</h4>
                <div className={styles.itemsList}>
                  {recentItems.map((item, index) => (
                    <div key={item.event_id || index} className={styles.previewItem}>
                      <div className={styles.imageContainer}>
                        <ImageWithFallback
                          src={item.image_origin || item.imageCandidates?.[0] || item.image}
                          alt={`${activeTab} preview`}
                          fallbackIcon={fallbackIcon}
                        />
                      </div>
                      <div className={styles.itemInfo}>
                        <div className={styles.itemLabel}>
                          {item.top_match?.label || item.label || 'Unknown'}
                        </div>
                        {item.top_match?.similarity && (
                          <div className={styles.similarity}>
                            {(item.top_match.similarity * 100).toFixed(1)}%
                          </div>
                        )}
                        <div className={styles.timestamp}>
                          {item.create_time || item.when || item.detection_time ? 
                            new Date(item.create_time || item.when || item.detection_time).toLocaleString() : 
                            'Unknown time'
                          }
                        </div>
                      </div>
                    </div>
                  ))}
                </div>
              </div>
            ) : (
              <div className={styles.noData}>
                <i className="bi bi-info-circle"></i>
                <span>No recent activity available</span>
              </div>
            )
          ) : activeTab === 'dahua' ? (
            recentItems.length > 0 ? (
              <div className={styles.recentItems}>
                <h4 className={styles.sectionTitle}>Detection Details</h4>
                <div className={styles.itemsList}>
                  {recentItems.slice(0, 1).map((item, index) => (
                    <div key={item.event_id || index} className={styles.previewItem}>
                      <div className={styles.imageContainer}>
                        <ImageWithFallback
                          src={item.source || item.image_origin || item.imageCandidates?.[0] || item.image}
                          alt="Detection preview"
                          fallbackIcon={fallbackIcon}
                        />
                      </div>
                      <div className={styles.itemInfo}>
                        <div className={styles.itemLabel}>
                          <strong>Camera:</strong> {item.user_data || 'Unknown Camera'}
                        </div>
                        <div className={styles.itemLabel}>
                          <strong>City:</strong> {item.city || locationInfo.city || 'Unknown'}
                        </div>
                        {item.similarity && (
                          <div className={styles.similarity}>
                            <strong>Similarity:</strong> {(item.similarity * 100).toFixed(1)}%
                          </div>
                        )}
                        <div className={styles.timestamp}>
                          <strong>Date & Time:</strong> {item.create_time ? 
                            new Date(item.create_time).toLocaleString() : 
                            'Unknown time'
                          }
                        </div>
                      </div>
                    </div>
                  ))}
                </div>
              </div>
            ) : (
              <div className={styles.noData}>
                <i className="bi bi-info-circle"></i>
                <span>No recent detections available</span>
              </div>
            )
          ) : (
            <div className={styles.noData}>
              <i className="bi bi-info-circle"></i>
              <span>No data available</span>
            </div>
          )}

          <div className={styles.actions}>
            <button 
              className={styles.seeDetailsButton}
              onClick={() => {
                onSeeDetails(clusterData);
                onClose();
              }}
              disabled={totalCount === 0}
            >
              <i className="bi bi-table"></i>
              See All Details ({totalCount})
            </button>
          </div>
        </div>
      </div>
    </div>
  );
}